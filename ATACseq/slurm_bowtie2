#!/bin/bash
#SBATCH --partition=normal
#SBATCH --export=NONE
#SBATCH --time=24:00:00
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=8
#SBATCH --mem-per-cpu=4G
#SBATCH --output="%x.o%j"
#SBATCH --error="%x.e%j"

WORKDIR=XXWORKDIRXX
READ1=XXREAD1XX
READ2=XXREAD2XX
SAMPLENAME=XXSAMPLENAMEXX
GENOME=XXGENOMEXX
MAPQ=10
TRIMSCRIPT=/s1/opt/bin/pyadapter_trim.v2.py
BOWTIE2INDEX=/s1/share/bowtie2_indexes/${GENOME}

cd $WORKDIR

module load python/2.7.5
module load bowtie2
module load samtools
module load bedtools

# python2.7 $TRIMSCRIPT -a $READ1 -b $READ2
READ1=`basename $READ1 | sed s/.fastq.*/.trim.fastq.gz/`
READ2=`basename $READ2 | sed s/.fastq.*/.trim.fastq.gz/`

# do mapping of paired end reads
bowtie2 -p 8 -x $BOWTIE2INDEX --maxins 2000 -N 1 -1 ${READ1} -2 ${READ2} -S ${SAMPLENAME}.sam
samtools view -b -S ${SAMPLENAME}.sam > ${SAMPLENAME}.bam

# make fragments bed file
# use only properly paired (FLAG == 0x2) reads to BED format
# remove mitotic chromosomal reads
samtools view -bf 0x2 ${SAMPLENAME}.bam | bedtools bamtobed -i stdin -bedpe | grep -v M | grep -v random | grep -v Un | \
awk -v mapq=$MAPQ 'BEGIN{FS=OFS="\t"}{if($8 >= mapq) print "chr"$1,$2,$6,$6-$2,$8,"+"}' | sort --parallel=4 -S 16G -k 1,1 -k 2,2n -k 3,3n -u > ${SAMPLENAME}.bed
