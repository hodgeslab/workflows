#!/bin/bash
#SBATCH --partition=normal
#SBATCH --export=NONE
#SBATCH --time=48:00:00
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=4
#SBATCH --mem-per-cpu=4G
#SBATCH --output="%x.o%j"
#SBATCH --error="%x.e%j"

WORKDIR=XXWORKDIRXX
READ1=XXREAD1XX
SAMPLENAME=XXSAMPLENAMEXX
GENOME=XXGENOMEXX
MAPQ=10

FRAGMENTLENGTH=200
FRAGMENTSBED=${SAMPLENAME}.fragments_${FRAGMENTLENGTH}bp.bed

# map genome names to folders matching the bowtie2 index structure
declare -A INDEXDIR=([hg38]="hg38/grch38_1kgmaj" [hg19]="hg19/hg19_1kgmaj" [mm10]="mm10/mm10" [mm9]="mm9/mm9")
BOWTIE2INDEX=/s1/share/bowtie2_indexes/${INDEXDIR[$GENOME]}

module load bowtie2
module load samtools
module load bedtools

cd $WORKDIR

# mapping of single end reads
bowtie2 -p 4 -x $BOWTIE2INDEX -N 1 -U ${READ1} -S ${SAMPLENAME}.sam
samtools view -b -S ${SAMPLENAME}.sam | samtools sort -n -o ${SAMPLENAME}.bam -

# make fragments bed file only for fragments with sufficient map quality and extend fragments
if [ $GENOME = "hg38" ]; then
  samtools view -b ${SAMPLENAME}.bam | bedtools bamtobed -i stdin | grep -vw M | grep -v random | grep -v Un | \
  awk -v mapq=$MAPQ 'BEGIN{FS=OFS="\t"}{if($5 >= mapq) print "chr"$1,$2,$3,$6}' | sort --parallel=4 -k 1,1 -k 2,2n -k 3,3n -k 4,4 -u > ${SAMPLENAME}.bed
  awk -v len=$FRAGMENTLENGTH 'BEGIN { OFS="\t"; while(getline < "/s1/share/UCSC_Downloads/hg38/chrom.sizes" > 0) chr[$1]=$2 } { if($4=="+") { $3=$2+len } else { $2=$3-len }; if($2<0) $2=0; if($3>chr[$1]) $3=chr[$1]; print; }' ${SAMPLENAME}.bed | sort -k 1,1 -k 2,2n -k 3,3n -k 4,4 -u > $FRAGMENTSBED
elif [ $GENOME = "hg19" ]; then
  samtools view -b ${SAMPLENAME}.bam | bedtools bamtobed -i stdin | grep -vw M | grep -v random | grep -v Un | \
  awk -v mapq=$MAPQ 'BEGIN{FS=OFS="\t"}{if($5 >= mapq) print "chr"$1,$2,$3,$6}' | sort --parallel=4 -k 1,1 -k 2,2n -k 3,3n -k 4,4 -u > ${SAMPLENAME}.bed
  awk -v len=$FRAGMENTLENGTH 'BEGIN { OFS="\t"; while(getline < "/s1/share/UCSC_Downloads/hg19/chrom.sizes" > 0) chr[$1]=$2 } { if($4=="+") { $3=$2+len } else { $2=$3-len }; if($2<0) $2=0; if($3>chr[$1]) $3=chr[$1]; print; }' ${SAMPLENAME}.bed | sort -k 1,1 -k 2,2n -k 3,3n -k 4,4 -u > $FRAGMENTSBED
elif [ $GENOME = "mm10" ]; then
  samtools view -b ${SAMPLENAME}.bam | bedtools bamtobed -i stdin | grep -vw chrM | grep -v random | grep -v Un | \
  awk -v mapq=$MAPQ 'BEGIN{FS=OFS="\t"}{if($5 >= mapq) print $1,$2,$3,$6}' | sort --parallel=4 -k 1,1 -k 2,2n -k 3,3n -k 4,4 -u > ${SAMPLENAME}.bed
  awk -v len=$FRAGMENTLENGTH 'BEGIN { OFS="\t"; while(getline < "/s1/share/UCSC_Downloads/mm10/chrom.sizes" > 0) chr[$1]=$2 } { if($4=="+") { $3=$2+len } else { $2=$3-len }; if($2<0) $2=0; if($3>chr[$1]) $3=chr[$1]; print; }' ${SAMPLENAME}.bed | sort -k 1,1 -k 2,2n -k 3,3n -k 4,4 -u > $FRAGMENTSBED
elif [ $GENOME = "mm9" ]; then
  samtools view -b ${SAMPLENAME}.bam | bedtools bamtobed -i stdin | grep -vw chrM | grep -v random | grep -v Un | \
  awk -v mapq=$MAPQ 'BEGIN{FS=OFS="\t"}{if($5 >= mapq) print $1,$2,$3,$6}' | sort --parallel=4 -k 1,1 -k 2,2n -k 3,3n -k 4,4 -u > ${SAMPLENAME}.bed
  awk -v len=$FRAGMENTLENGTH 'BEGIN { OFS="\t"; while(getline < "/s1/share/UCSC_Downloads/mm9/chrom.sizes" > 0) chr[$1]=$2 } { if($4=="+") { $3=$2+len } else { $2=$3-len }; if($2<0) $2=0; if($3>chr[$1]) $3=chr[$1]; print; }' ${SAMPLENAME}.bed | sort -k 1,1 -k 2,2n -k 3,3n -k 4,4 -u > $FRAGMENTSBED
fi
